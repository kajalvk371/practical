Practical No. 4 - Digital Signatures:
Implement digital signature algorithms such as RSA-based signatures and verify the integrity and authenticity of digitally signed messages.

Theory: 
Digital Signature:
Digital signatures provide a means of ensuring message integrity and authenticity in secure communication. A digital signature is a cryptographic technique that uses asymmetric encryption algorithms, such as RSA (Rivest-Shamir-Adleman), to bind the identity of the signer with the content of a message. It allows the recipient to verify the integrity of the message and authenticate the signer's identity.

RSA Algorithm:
RSA (Rivest-Shamir-Adleman) is an asymmetric encryption algorithm widely used for secure communication. It is based on the mathematical problem of factoring large prime numbers, which is computationally difficult. RSA consists of a key pair: a public key for encryption and a private key for decryption and digital signing.

Digital Signature Generation Process:
To generate a digital signature using RSA, follow these steps:
The signer generates a key pair: a private key (d) and a public key (e, N).
The signer computes the hash value of the message using a cryptographic hash function, such as SHA-256, to ensure data integrity.
The signer applies a mathematical function to the hash value using their private key (d) to generate the digital signature.

Digital Signature Verification Process:
To verify the authenticity and integrity of a received message using a digital signature, follow these steps:
The recipient obtains the signer's public key (e, N).
The recipient applies a mathematical function to the received digital signature using the signer's public key (e, N).
The recipient computes the hash value of the received message using the same cryptographic hash function.
The recipient compares the computed signature with the received digital signature. If they match, the message is considered authentic and intact.

Code:-

import hashlib
import rsa

# Generate RSA key pair
public_key, private_key = rsa.newkeys(512)  # Adjust key size as needed

# Function to create a digital signature
def create_signature(private_key, message):
    message_hash = hashlib.sha256(message.encode()).digest()
    signature = rsa.sign(message_hash, private_key, 'SHA-256')
    return signature

# Function to verify a digital signature
def verify_signature(public_key, message, signature):
    message_hash = hashlib.sha256(message.encode()).digest()
    try:
        rsa.verify(message_hash, signature, public_key)
        return True
    except rsa.VerificationError:
        return False

# Example usage
message = input("Enter the message: ")

# Creating a digital signature
signature = create_signature(private_key, message)
print("Digital Signature:", signature.hex())

# Verifying the digital signature
verify_input = input("Do you want to verify the signature? (yes/no): ")
if verify_input.lower() == 'yes':
    verify_signature_input = input("Enter the digital signature to verify: ")
    verify_result = verify_signature(public_key, message, bytes.fromhex(verify_signature_input))
    if verify_result:
        print("Digital Signature is valid. The message is authentic.")
    else:
        print("Digital Signature is invalid. The message may have been tampered with.")
else:
    print("Verification skipped.")

