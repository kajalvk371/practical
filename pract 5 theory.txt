Practical No. 5 - Key Exchange using Diffe-Hellman : 
To study and implement the Diffe-Hellman key exchange algorithm for secure exchange of keys between two entities.

Theory: 
Key Exchange:
Key exchange is a fundamental concept in cryptography that allows two parties to securely establish a shared secret key over an insecure communication channel. The shared key can then be used for symmetric encryption to ensure confidentiality, integrity, and authenticity of the communication. One widely used key exchange algorithm is the Diffie-Hellman algorithm.

Key Exchange Techniques:
Key exchange techniques enable secure key establishment between two parties. There are two main types of key exchange techniques:
Symmetric Key Exchange
Asymmetric Key Exchange

Symmetric Key Exchange:
In symmetric key exchange, both parties share a pre-established secret key. This key is typically distributed using a secure out-of-band method. Once the secret key is shared, it can be used for secure communication. However, this approach requires prior key sharing and becomes impractical for scenarios where a large number of participants need to securely communicate

Asymmetric Key Exchange:
Asymmetric key exchange, also known as public key exchange, overcomes the limitations of symmetric key exchange by using asymmetric encryption algorithms. It allows two parties who have never communicated before to establish a shared secret key without any prior key sharing. Asymmetric key exchange is based on the concept of public and private key pairs, where the public key is widely known and the private key is kept secret.

Diffie-Hellman Algorithm:
The Diffie-Hellman algorithm is a widely used asymmetric key exchange algorithm. It enables two parties to securely establish a shared secret key over an insecure communication channel. 
High-level working explanation of the Diffie-Hellman algorithm:
Select a large prime number, p, and a primitive root modulo p, g. These values are publicly known.
Each party, Alice and Bob, generates a private key, a and b, respectively.
Both Alice and Bob calculate their public keys:
Alice: A = ga mod p
Bob: B = gb mod p
Alice and Bob exchange their public keys over the insecure channel.
Key Generation:
Alice calculates the shared secret key using Bob's public key:
Secret Key: K = Ba mod p
Bob calculates the shared secret key using Alice's public key:
Secret Key: K = Ab mod p
Key Agreement:
Both Alice and Bob have calculated the same shared secret key, K, independently.
They can now use K as the shared secret key for symmetric encryption algorithms to ensure secure communication.

Code:

Python code for implementing Diffie-Hellman Algorithm :
from random import randint

# Check if the script is being run as the main program
if __name__ == '__main__':
  
    # Define prime number P and generator G
    P = 23
    G = 9
         
    # Print the values of P and G
    print('The Value of P is :%d'%(P))
    print('The Value of G is :%d'%(G))
     
    # Alice's secret number
    a = 4
    print('Secret Number for Alice is :%d'%(a))
     
    # Calculate Alice's public key x
    x = int(pow(G, a, P)) 

    # Bob's secret number
    b = 6
    print('Secret Number for Bob is :%d'%(b))
   
    # Calculate Bob's public key y
    y = int(pow(G, b, P)) 

    # Calculate the shared secret key for Alice (ka)
    ka = int(pow(y, a, P))
  
    # Calculate the shared secret key for Bob (kb)
    kb = int(pow(x, b, P))
     
    # Print the shared secret keys
    print('Secret key for Alice is : %d'%(ka))
    print('Secret Key for Bob is : %d'%(kb))


Python code for implementing Diffie-Hellman Algorithm :

# Function to calculate the modular exponentiation (x^y % p)
# Function to perform the Diffie-Hellman key exchange
def diffie_hellman():
    # Input prime number (P) and primitive root (G)
    P = int(input("Enter a prime number (P): "))
    G = int(input("Enter a primitive root (G): "))

    # Input private keys for Alice and Bob
    private_key_A = int(input("Enter Alice's private key (a): "))
    private_key_B = int(input("Enter Bob's private key (b): "))

    # Calculate public keys for Alice and Bob
    public_key_A = int(pow(G, private_key_A, P))
    public_key_B = int(pow(G, private_key_B, P))

    # Shared secret key calculation
    shared_secret_key_A = int(pow(public_key_B, private_key_A, P))
    shared_secret_key_B = int(pow(public_key_A, private_key_B, P))

    # Output public keys and shared secret keys
    print("\nPublic Key for Alice (A):", public_key_A)
    print("Public Key for Bob (B):", public_key_B)
    print("\nShared Secret Key for Alice (Ka):", shared_secret_key_A)
    print("Shared Secret Key for Bob (Kb):", shared_secret_key_B)

if __name__ == '__main__':
    diffie_hellman()



